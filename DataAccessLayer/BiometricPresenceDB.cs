// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Metadata;

#nullable disable

namespace DataAccessLayer
{
    public partial class BiometricPresenceDB : DbContext
    {
        public BiometricPresenceDB()
        {
        }

        public BiometricPresenceDB(DbContextOptions<BiometricPresenceDB> options)
            : base(options)
        {
        }

        public virtual DbSet<Administrator> Administrators { get; set; }
        public virtual DbSet<Class> Classes { get; set; }
        public virtual DbSet<ClassesLessons> ClassesLessons { get; set; }
        public virtual DbSet<ClassesStudents> ClassesStudent { get; set; }
        public virtual DbSet<ClassesTeachers> ClassesTeacher { get; set; }
        public virtual DbSet<Lesson> Lessons { get; set; }
        public virtual DbSet<Presence> Presences { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<SubjectTeachers> SubjectTeachers { get; set; }
        public virtual DbSet<Subject> Subjects { get; set; }
        public virtual DbSet<Teacher> Teachers { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Administrator>(entity =>
            {
                entity.ToTable("ADMINISTRATORS");

                entity.HasIndex(e => e.Cpf, "UQ_ADMINISTRATORS_CPF")
                    .IsUnique();

                entity.HasIndex(e => e.Email, "UQ_ADMINISTRATORS_EMAIL")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Active).HasColumnName("ACTIVE");

                entity.Property(e => e.Admname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("ADMNAME");

                entity.Property(e => e.Birthdate)
                    .HasColumnType("date")
                    .HasColumnName("BIRTHDATE");

                entity.Property(e => e.Cpf)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("CPF")
                    .IsFixedLength(true);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Passcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PASSCODE");

                entity.Property(e => e.Phonenumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PHONENUMBER");
            });

            modelBuilder.Entity<Class>(entity =>
            {
                entity.ToTable("CLASSES");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Classname)
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("CLASSNAME");

                entity.Property(e => e.Classshift).HasColumnName("CLASSSHIFT");
            });

            modelBuilder.Entity<ClassesLessons>(entity =>
            {
                entity.ToTable("CLASSES_LESSONS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Classid).HasColumnName("CLASSID");

                entity.Property(e => e.Fridayfifthlesson).HasColumnName("FRIDAYFIFTHLESSON");

                entity.Property(e => e.Fridayfirstlesson).HasColumnName("FRIDAYFIRSTLESSON");

                entity.Property(e => e.Fridayforthlesson).HasColumnName("FRIDAYFORTHLESSON");

                entity.Property(e => e.Fridaysecondlesson).HasColumnName("FRIDAYSECONDLESSON");

                entity.Property(e => e.Fridaythirdlesson).HasColumnName("FRIDAYTHIRDLESSON");

                entity.Property(e => e.Mondayfifthlesson).HasColumnName("MONDAYFIFTHLESSON");

                entity.Property(e => e.Mondayfirstlesson).HasColumnName("MONDAYFIRSTLESSON");

                entity.Property(e => e.Mondayforthlesson).HasColumnName("MONDAYFORTHLESSON");

                entity.Property(e => e.Mondaysecondlesson).HasColumnName("MONDAYSECONDLESSON");

                entity.Property(e => e.Mondaythirdlesson).HasColumnName("MONDAYTHIRDLESSON");

                entity.Property(e => e.Thursdayfifthlesson).HasColumnName("THURSDAYFIFTHLESSON");

                entity.Property(e => e.Thursdayfirstlesson).HasColumnName("THURSDAYFIRSTLESSON");

                entity.Property(e => e.Thursdayforthlesson).HasColumnName("THURSDAYFORTHLESSON");

                entity.Property(e => e.Thursdaysecondlesson).HasColumnName("THURSDAYSECONDLESSON");

                entity.Property(e => e.Thursdaythirdlesson).HasColumnName("THURSDAYTHIRDLESSON");

                entity.Property(e => e.Tuesdayfifthlesson).HasColumnName("TUESDAYFIFTHLESSON");

                entity.Property(e => e.Tuesdayfirstlesson).HasColumnName("TUESDAYFIRSTLESSON");

                entity.Property(e => e.Tuesdayforthlesson).HasColumnName("TUESDAYFORTHLESSON");

                entity.Property(e => e.Tuesdaysecondlesson).HasColumnName("TUESDAYSECONDLESSON");

                entity.Property(e => e.Tuesdaythirdlesson).HasColumnName("TUESDAYTHIRDLESSON");

                entity.Property(e => e.Wednesdayfifthlesson).HasColumnName("WEDNESDAYFIFTHLESSON");

                entity.Property(e => e.Wednesdayfirstlesson).HasColumnName("WEDNESDAYFIRSTLESSON");

                entity.Property(e => e.Wednesdayforthlesson).HasColumnName("WEDNESDAYFORTHLESSON");

                entity.Property(e => e.Wednesdaysecondlesson).HasColumnName("WEDNESDAYSECONDLESSON");

                entity.Property(e => e.Wednesdaythirdlesson).HasColumnName("WEDNESDAYTHIRDLESSON");

                entity.HasOne(d => d.Class)
                    .WithMany(p => p.ClassesLessons)
                    .HasForeignKey(d => d.Classid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_LESSONS");

                entity.HasOne(d => d.FridayfifthlessonNavigation)
                    .WithMany(p => p.ClassesLessonsFridayfifthlessonNavigation)
                    .HasForeignKey(d => d.Fridayfifthlesson)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_LESSONSFRIDAY5");

                entity.HasOne(d => d.FridayfirstlessonNavigation)
                    .WithMany(p => p.ClassesLessonsFridayfirstlessonNavigation)
                    .HasForeignKey(d => d.Fridayfirstlesson)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_LESSONSFRIDAY1");

                entity.HasOne(d => d.FridayforthlessonNavigation)
                    .WithMany(p => p.ClassesLessonsFridayforthlessonNavigation)
                    .HasForeignKey(d => d.Fridayforthlesson)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_LESSONSFRIDAY4");

                entity.HasOne(d => d.FridaysecondlessonNavigation)
                    .WithMany(p => p.ClassesLessonsFridaysecondlessonNavigation)
                    .HasForeignKey(d => d.Fridaysecondlesson)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_LESSONSFRIDAY2");

                entity.HasOne(d => d.FridaythirdlessonNavigation)
                    .WithMany(p => p.ClassesLessonsFridaythirdlessonNavigation)
                    .HasForeignKey(d => d.Fridaythirdlesson)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_LESSONSFRIDAY3");

                entity.HasOne(d => d.MondayfifthlessonNavigation)
                    .WithMany(p => p.ClassesLessonsMondayfifthlessonNavigation)
                    .HasForeignKey(d => d.Mondayfifthlesson)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_LESSONSMONDAY5");

                entity.HasOne(d => d.MondayfirstlessonNavigation)
                    .WithMany(p => p.ClassesLessonsMondayfirstlessonNavigation)
                    .HasForeignKey(d => d.Mondayfirstlesson)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_LESSONSMONDAY1");

                entity.HasOne(d => d.MondayforthlessonNavigation)
                    .WithMany(p => p.ClassesLessonsMondayforthlessonNavigation)
                    .HasForeignKey(d => d.Mondayforthlesson)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_LESSONSMONDAY4");

                entity.HasOne(d => d.MondaysecondlessonNavigation)
                    .WithMany(p => p.ClassesLessonsMondaysecondlessonNavigation)
                    .HasForeignKey(d => d.Mondaysecondlesson)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_LESSONSMONDAY2");

                entity.HasOne(d => d.MondaythirdlessonNavigation)
                    .WithMany(p => p.ClassesLessonsMondaythirdlessonNavigation)
                    .HasForeignKey(d => d.Mondaythirdlesson)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_LESSONSMONDAY3");

                entity.HasOne(d => d.ThursdayfifthlessonNavigation)
                    .WithMany(p => p.ClassesLessonsThursdayfifthlessonNavigation)
                    .HasForeignKey(d => d.Thursdayfifthlesson)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_LESSONSTHURSDAY5");

                entity.HasOne(d => d.ThursdayfirstlessonNavigation)
                    .WithMany(p => p.ClassesLessonsThursdayfirstlessonNavigation)
                    .HasForeignKey(d => d.Thursdayfirstlesson)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_LESSONSTHURSDAY1");

                entity.HasOne(d => d.ThursdayforthlessonNavigation)
                    .WithMany(p => p.ClassesLessonsThursdayforthlessonNavigation)
                    .HasForeignKey(d => d.Thursdayforthlesson)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_LESSONSTHURSDAY4");

                entity.HasOne(d => d.ThursdaysecondlessonNavigation)
                    .WithMany(p => p.ClassesLessonsThursdaysecondlessonNavigation)
                    .HasForeignKey(d => d.Thursdaysecondlesson)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_LESSONSTHURSDAY2");

                entity.HasOne(d => d.ThursdaythirdlessonNavigation)
                    .WithMany(p => p.ClassesLessonsThursdaythirdlessonNavigation)
                    .HasForeignKey(d => d.Thursdaythirdlesson)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_LESSONSTHURSDAY3");

                entity.HasOne(d => d.TuesdayfifthlessonNavigation)
                    .WithMany(p => p.ClassesLessonsTuesdayfifthlessonNavigation)
                    .HasForeignKey(d => d.Tuesdayfifthlesson)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_LESSONSTUESDAY5");

                entity.HasOne(d => d.TuesdayfirstlessonNavigation)
                    .WithMany(p => p.ClassesLessonsTuesdayfirstlessonNavigation)
                    .HasForeignKey(d => d.Tuesdayfirstlesson)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_LESSONSTUESDAY1");

                entity.HasOne(d => d.TuesdayforthlessonNavigation)
                    .WithMany(p => p.ClassesLessonsTuesdayforthlessonNavigation)
                    .HasForeignKey(d => d.Tuesdayforthlesson)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_LESSONSTUESDAY4");

                entity.HasOne(d => d.TuesdaysecondlessonNavigation)
                    .WithMany(p => p.ClassesLessonsTuesdaysecondlessonNavigation)
                    .HasForeignKey(d => d.Tuesdaysecondlesson)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_LESSONSTUESDAY2");

                entity.HasOne(d => d.TuesdaythirdlessonNavigation)
                    .WithMany(p => p.ClassesLessonsTuesdaythirdlessonNavigation)
                    .HasForeignKey(d => d.Tuesdaythirdlesson)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_LESSONSTUESDAY3");

                entity.HasOne(d => d.WednesdayfifthlessonNavigation)
                    .WithMany(p => p.ClassesLessonsWednesdayfifthlessonNavigation)
                    .HasForeignKey(d => d.Wednesdayfifthlesson)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_LESSONSWEDNESDAY5");

                entity.HasOne(d => d.WednesdayfirstlessonNavigation)
                    .WithMany(p => p.ClassesLessonsWednesdayfirstlessonNavigation)
                    .HasForeignKey(d => d.Wednesdayfirstlesson)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_LESSONSWEDNESDAY1");

                entity.HasOne(d => d.WednesdayforthlessonNavigation)
                    .WithMany(p => p.ClassesLessonsWednesdayforthlessonNavigation)
                    .HasForeignKey(d => d.Wednesdayforthlesson)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_LESSONSWEDNESDAY4");

                entity.HasOne(d => d.WednesdaysecondlessonNavigation)
                    .WithMany(p => p.ClassesLessonsWednesdaysecondlessonNavigation)
                    .HasForeignKey(d => d.Wednesdaysecondlesson)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_LESSONSWEDNESDAY2");

                entity.HasOne(d => d.WednesdaythirdlessonNavigation)
                    .WithMany(p => p.ClassesLessonsWednesdaythirdlessonNavigation)
                    .HasForeignKey(d => d.Wednesdaythirdlesson)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_LESSONSWEDNESDAY3");
            });

            modelBuilder.Entity<ClassesStudents>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CLASSES_STUDENT");

                entity.Property(e => e.Classid).HasColumnName("CLASSID");

                entity.Property(e => e.Studentid).HasColumnName("STUDENTID");

                entity.HasOne(d => d.Class)
                    .WithMany()
                    .HasForeignKey(d => d.Classid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASS_CLASSES");

                entity.HasOne(d => d.Student)
                    .WithMany()
                    .HasForeignKey(d => d.Studentid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASS_STUDENTS");
            });

            modelBuilder.Entity<ClassesTeachers>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("CLASSES_TEACHER");

                entity.Property(e => e.Classid).HasColumnName("CLASSID");

                entity.Property(e => e.Teacherid).HasColumnName("TEACHERID");

                entity.HasOne(d => d.Class)
                    .WithMany()
                    .HasForeignKey(d => d.Classid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_TEACHER_CLASSES");

                entity.HasOne(d => d.Teacher)
                    .WithMany()
                    .HasForeignKey(d => d.Teacherid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CLASSES_TEACHER_TEACHERS");
            });

            modelBuilder.Entity<Lesson>(entity =>
            {
                entity.ToTable("LESSONS");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Lessondate).HasColumnName("LESSONDATE");

                entity.Property(e => e.Subjectid).HasColumnName("SUBJECTID");

                entity.Property(e => e.Teacherid).HasColumnName("TEACHERID");

                entity.HasOne(d => d.Subject)
                    .WithMany(p => p.Lessons)
                    .HasForeignKey(d => d.Subjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LESSON_SUBJECT");

                entity.HasOne(d => d.Teacher)
                    .WithMany(p => p.Lessons)
                    .HasForeignKey(d => d.Teacherid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_LESSON_TEACHER");
            });

            modelBuilder.Entity<Presence>(entity =>
            {
                entity.ToTable("PRESENCES");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Classlessonid).HasColumnName("CLASSLESSONID");

                entity.Property(e => e.HasPresence).HasColumnName("PRESENCE");

                entity.Property(e => e.Studentid).HasColumnName("STUDENTID");

                entity.HasOne(d => d.Classlesson)
                    .WithMany(p => p.Presences)
                    .HasForeignKey(d => d.Classlessonid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PRESENCE_LESSON");

                entity.HasOne(d => d.Student)
                    .WithMany(p => p.Presences)
                    .HasForeignKey(d => d.Studentid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PRESENCE_STUDENT");
            });

            modelBuilder.Entity<Student>(entity =>
            {
                entity.ToTable("STUDENTS");

                entity.HasIndex(e => e.Cpf, "UQ_STUDENTS_CPF")
                    .IsUnique();

                entity.HasIndex(e => e.Register, "UQ_STUDENTS_REGISTER")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Active).HasColumnName("ACTIVE");

                entity.Property(e => e.Birthdate)
                    .HasColumnType("date")
                    .HasColumnName("BIRTHDATE");

                entity.Property(e => e.Cpf)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("CPF")
                    .IsFixedLength(true);

                entity.Property(e => e.Passcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PASSCODE");

                entity.Property(e => e.Phonenumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PHONENUMBER");

                entity.Property(e => e.Picture)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("PICTURE");

                entity.Property(e => e.Register)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("REGISTER");

                entity.Property(e => e.Studentname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("STUDENTNAME");
            });

            modelBuilder.Entity<SubjectTeachers>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("SUBJECT_TEACHERS");

                entity.Property(e => e.Subjectid).HasColumnName("SUBJECTID");

                entity.Property(e => e.Teacherid).HasColumnName("TEACHERID");

                entity.HasOne(d => d.Subject)
                    .WithMany()
                    .HasForeignKey(d => d.Subjectid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SUBJECT_TEACHER_SUBJECT");

                entity.HasOne(d => d.Teacher)
                    .WithMany()
                    .HasForeignKey(d => d.Teacherid)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SUBJECT_TEACHER_TEACHER");
            });

            modelBuilder.Entity<Subject>(entity =>
            {
                entity.ToTable("SUBJECTS");

                entity.HasIndex(e => e.Subjectname, "UQ_SUBJECTNAME_NAME")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Subjectname)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("SUBJECTNAME");
            });

            modelBuilder.Entity<Teacher>(entity =>
            {
                entity.ToTable("TEACHERS");

                entity.HasIndex(e => e.Cpf, "UQ_TEACHERS_CPF")
                    .IsUnique();

                entity.HasIndex(e => e.Email, "UQ_TEACHERS_EMAIL")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Active).HasColumnName("ACTIVE");

                entity.Property(e => e.Birthdate)
                    .HasColumnType("date")
                    .HasColumnName("BIRTHDATE");

                entity.Property(e => e.Cpf)
                    .IsRequired()
                    .HasMaxLength(11)
                    .IsUnicode(false)
                    .HasColumnName("CPF")
                    .IsFixedLength(true);

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("EMAIL");

                entity.Property(e => e.Passcode)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("PASSCODE");

                entity.Property(e => e.Phonenumber)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false)
                    .HasColumnName("PHONENUMBER");

                entity.Property(e => e.Picture)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("PICTURE");

                entity.Property(e => e.Teachername)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("TEACHERNAME");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}